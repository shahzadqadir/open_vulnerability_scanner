from subprocess import call
from platform import platform
from os import devnull

from netmiko import ConnectHandler
import paramiko
import paramiko.ssh_exception

class Connectivity:
    """Implemented using netmiko
    Required Parameters: hostname/ip, username, password
    Optional: enable secret - if required by remote device,
    session_log - filename to record session logs
    Output Formats: List/Dictionary
    """

    def __init__(self, host: str, username: str, password: str, 
                 enable_secret: str=None, session_log: str=None):
        self.host = host
        self.username = username
        self.password = password
        self.enable_secret = enable_secret
        self.session_log = session_log

    def set_connection_params(self, device_type: str):
        connection_params = {
            "device_type": device_type,
            "host": self.host,
            "username": self.username,
            "password": self.password,
        }
        if self.enable_secret:
            connection_params["secret"] = self.enable_secret
        if self.session_log:
            connection_params["session_log"] = self.session_log
        return connection_params

    def send_show_command_cisco(self, command):
        with ConnectHandler(**self.set_connection_params("cisco_ios")) as net_connect:
            return net_connect.send_command(command, use_textfsm=True)

    def send_config_command_cisco(self, commands: list):
        """_summary_

        Args:
            commands (list): list of Cisco IOS Commands

        Returns:
            _type_: str, indicating commands run and build configuration status
        """

        with ConnectHandler(**self.set_connection_params("cisco_ios")) as net_connect:
            output = net_connect.send_config_set(commands)
            output += net_connect.save_config()
        return output
    
    def show_command_output_raw(self, command: str):
        """Takes a command returns raw output as a string.

        Args:
            command (str): cisco command, ios, xr, xe, nx-os all supported

        Returns:
            _type_: str, raw output without formatting
        """
        try:
            conn = paramiko.SSHClient()
            conn.set_missing_host_key_policy(paramiko.AutoAddPolicy)
            conn.connect(hostname=self.host, username=self.username, 
                         password=self.password, allow_agent=False, 
                         look_for_keys=False)
            stdin, stdout, stderr = conn.exec_command(command=command)
            return stdout.read().decode("ascii").strip("\n")
        except paramiko.ssh_exception.AuthenticationException():
            return "Authentication failed."
        except paramiko.ssh_exception.NoValidConnectionsError():
            return "No connection."
            


    @staticmethod
    def check_connectivity(ip_address):
        count = "-c"
        if "window" in platform().lower():
            count = "-n"
        null = open(devnull, "w")
        if call(["ping", count, "3", ip_address], stdout=null) == 0:
            return True
        return False
