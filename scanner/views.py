from django.shortcuts import render, redirect
from django.views import generic
from django.urls import reverse_lazy, reverse
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from django.http import HttpResponse

from . import forms
from scanner import models
from .helper_classes.vscanner import VulnerabilityScan
from .helper_classes.connectivity import Connectivity


@login_required
def scanner_home(request):
    """Serves homepage with search forms.

    Args:
        request: HTTP Request object
    """

    apis = models.API.objects.all().filter(owner=request.user).first()
    if apis:       
        ios_vuln_search_form = forms.IOSVulnSearchForm()
        show_version_search_form = forms.VulnSearchFormWithShowVersion()
        connection_form = forms.DeviceConnectForm()
        if request.method == "POST":
            ios_version = request.POST.get("ios")
            os_type = request.POST.get("os_type")
            if not ios_version or not os_type:
                device_show_version = request.POST.get("show_version")
                if device_show_version:
                    os_type, ios_version = VulnerabilityScan.find_ostype_and_version(device_show_version)
                else:
                    host = request.POST.get("ip_address")
                    username = request.POST.get("username")
                    password = request.POST.get("password")
                    ct = Connectivity(host=host, username=username, password=password)
                    output = ct.show_command_output_raw("show version")
                    os_type, ios_version = VulnerabilityScan.find_ostype_and_version(output)
            os_in_db = models.OS.objects.filter(os_type=os_type).filter(os_version=ios_version).first()
            if os_in_db:
                advisories_in_db = os_in_db.advisories.all()
                if advisories_in_db:
                    print("served from database.")
                    return render(request, "scanner/list_advisories.html", {
                        "advisories": advisories_in_db, 
                        "advisory_count": len(advisories_in_db)})
            api_key = models.API.objects.get(owner=request.user).key
            customer_secret = models.API.objects.get(owner=request.user).client_secret
            vs = VulnerabilityScan(api_key, customer_secret)
            advisories = vs.get_advisory_by_software_version(software_version=ios_version, os_type=os_type)
            VulnerabilityScan.insert_advisories_to_db(advisories=advisories, os_type=os_type, os_version=ios_version)
            return render(request, "scanner/list_advisories.html", {"advisories": advisories,
                                                                    "advisory_count": len(advisories)})
        return render(request, "scanner/scanner_home.html", {'form': ios_vuln_search_form, 
                                                             'show_version_search_form': show_version_search_form,
                                                             'connection_form': connection_form})       
        # return redirect(reverse("api_list"))


class CreateAPI(LoginRequiredMixin, generic.edit.CreateView):
    """Create View for API Model

    Args:
        LoginRequiredMixin: Login required for API creation
        generic.CreateView: Generic CreateView
    """
    model = models.API
    fields = (
            "key",
            "client_secret",
            "status",
        )
    template_name = "scanner/api_create.html"
    success_url = reverse_lazy("api_list")

    def form_valid(self, form):
        form.instance.owner = self.request.user
        form.instance.name = "cisco-psirt"
        return super(CreateAPI, self).form_valid(form)
    

class ListAPI(LoginRequiredMixin, generic.ListView):
    """List View for API Model

    Args:
        LoginRequiredMixin: Login required for API creation
        generic.ListView: View entries in API Model
    """

    model = models.API
    queryset = models.API.objects.all()
    template_name = "scanner/api_list.html"
    context_object_name = "apis"


class DeleteAPI(LoginRequiredMixin, generic.DeleteView):
    """Delete View for API Model

    Args:
        LoginRequiredMixin: Login required for API deletion
        generic.DeleteView: Generic DeleteView
    """

    model = models.API
    queryset = models.API.objects.all()
    template_name = "scanner/api_delete.html"
    success_url = reverse_lazy("api_list")


class UpdateAPI(LoginRequiredMixin, generic.edit.UpdateView):
    """Update View for API Model

    Args:
        LoginRequiredMixin: Login required to update API details
        generic.edit.UpdateView: Update API details
    """

    model = models.API
    queryset = models.API.objects.all()
    fields = ("key", "client_secret", "status")
    template_name = "scanner/api_update.html"
    success_url = reverse_lazy("api_list")


